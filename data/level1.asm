
// Generated by CharPad 2.8, Subchrist Software, 2021.
// Assemble with 64TASS or similar.


// Character display mode : Multi-colour.

// Character colouring method : Per-Map.


// Colour values...

.var COLR_SCREEN = 9
.var COLR_CHAR_DEF = 11
.var COLR_CHAR_MC1 = 11
.var COLR_CHAR_MC2 = 14


// Quantities and dimensions...

.var CHAR_COUNT = 32
.var TILE_COUNT = 8
.var TILE_WID = 2
.var TILE_HEI = 2
.var MAP_WID = 20
.var MAP_HEI = 12
.var MAP_WID_CHRS = 40
.var MAP_HEI_CHRS = 24
.var MAP_WID_PXLS = 320
.var MAP_HEI_PXLS = 192


// Data block sizes (in bytes)...

.var SZ_CHARSET_DATA        = 256 // ($100)
.var SZ_CHARSET_ATTRIB_DATA = 32 // ($20)
.var SZ_TILESET_DATA        = 32 // ($20)
.var SZ_MAP_DATA            = 240 // ($F0)




// * INSERT EXAMPLE PROGRAM HERE! * (Or just include this file in your project).




// CHARSET IMAGE DATA...
// 32 images, 8 bytes per image, total size is 256 ($100) bytes.

charset_data:

.byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
.byte $55,$55,$55,$55,$55,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00,$00


// CHARSET IMAGE ATTRIBUTE DATA...
// 32 attributes, 1 attribute per image, 8 bits per attribute, total size is 32 ($20) bytes.
// nb. Upper nybbles = material, lower nybbles = colour.

charset_attrib_data:

.byte $03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03
.byte $03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03


// CHARTILESET DATA...
// 8 tiles, 2x2 (4) cells per tile, 8 bits per cell, total size is 32 ($20) bytes.

chartileset_data:

.byte $00,$00,$00,$00,$03,$03,$03,$03,$08,$09,$0A,$0B,$0C,$0D,$0E,$0F
.byte $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1A,$1B,$1C,$1D,$1E,$1F


// CHARTILESET TAG DATA...
// 8 tags, 1 tag per tile, 8 bits per tag, total size is 8 ($8) bytes.

chartileset_tag_data:

.byte $00,$00,$00,$00,$00,$00,$00,$00


// MAP DATA...
// 20x12 (240) cells, 8 bits per cell, total size is 240 ($F0) bytes.

map_data:

.byte $07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07
.byte $07,$07,$07,$07,$00,$07,$07,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
